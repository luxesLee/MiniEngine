#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(rgba8, binding = 0) uniform readonly image3D lastRadianceImg;
layout(rgba8, binding = 1) uniform writeonly image3D curRadianceImg;

const ivec3 offsets[] = ivec3[8]
(
	ivec3(1, 1, 1),
	ivec3(1, 1, 0),
	ivec3(1, 0, 1),
	ivec3(1, 0, 0),
	ivec3(0, 1, 1),
	ivec3(0, 1, 0),
	ivec3(0, 0, 1),
	ivec3(0, 0, 0)
);

vec4 fetchSum(ivec3 voxelPos)
{
    vec3 sum = vec3(0);
    float asum = 0.0f;
    float account = 0.0f;
    for(int i = 0; i < 8; i++)
    {
        vec4 color = imageLoad(lastRadianceImg, voxelPos + offsets[i]);
        sum += color.xyz;
        asum += color.a;
        account += step(0.01, color.a);
    }
    return vec4(sum / account, asum / 8.0f);
}

void main()
{
    ivec3 VoxelPos = ivec3(gl_GlobalInvocationID);
    // 这里还原回上层的对应坐标，并在附近8个点中采样
    vec4 accum = fetchSum(2 * VoxelPos);
    imageStore(curRadianceImg, VoxelPos, accum);
}